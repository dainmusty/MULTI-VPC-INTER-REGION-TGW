name: Terraform CI/CD Pipeline

on:
  push:
    branches-ignore:
      - main   # only run scans on feature branches
  pull_request:
    branches:
      - main   # run terraform plan on PRs into main
  workflow_dispatch: # allow manual destroy

env:
  AWS_REGION: us-east-1
  SONAR_PROJECT_KEY: dainmusty_MULTI-VPC-INTER-REGION-TGW
  SONAR_ORGANIZATION: effulgencetech
  TF_VAR_management_account_id: ${{ secrets.AWS_MANAGEMENT_ACCOUNT_ID }}
  TF_VAR_dev_account_id: ${{ secrets.AWS_DEV_ACCOUNT_ID }}

jobs:
  scans:
    name: Lint + Security + Sonar
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          projectKey: ${{ env.SONAR_PROJECT_KEY }}
          organization: ${{ env.SONAR_ORGANIZATION }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Install TFLint
        run: |
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
      - name: Run TFLint
        working-directory: env/dev
        run: tflint --init && tflint

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: env/dev
          framework: terraform
          quiet: true
          soft_fail: false
          config_file: .checkov.yml

      # optional: auto-create PR to main if on feature branch
      - name: Create Pull Request
        if: github.ref != 'refs/heads/main'
        uses: peter-evans/create-pull-request@v6
        with:
          branch: ${{ github.ref_name }}
          base: main
          title: "Terraform changes from ${{ github.ref_name }}"
          body: "This PR contains Terraform changes scanned and ready for review."

  terraform-plan:
    name: Terraform Plan (on PR)
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: scans
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Terraform Init
        working-directory: env/dev
        run: terraform init -input=false
      - name: Terraform Plan
        working-directory: env/dev
        run: terraform plan -out=tfplan

  terraform-apply:
    name: Terraform Apply (on merge)
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: scans
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Terraform Init
        working-directory: env/dev
        run: terraform init -input=false
      - name: Terraform Apply
        working-directory: env/dev
        run: terraform apply --auto-approve

  terraform-destroy:
    name: Destroy Infra (Manual Only)
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Terraform Init
        working-directory: env/dev
        run: terraform init -input=false
      - name: Terraform Destroy
        working-directory: env/dev
        run: terraform destroy --auto-approve
